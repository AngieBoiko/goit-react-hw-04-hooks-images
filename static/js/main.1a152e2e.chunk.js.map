{"version":3,"sources":["Components/Searchbar/Searchbar.jsx","Components/ImageGalleryItem/ImageGalleryItem.jsx","Components/Button/Button.jsx","Components/Modal/Modal.jsx","Components/Loader/Loader.jsx","Components/ImageGallery/ImageGallery.jsx","services/PixabayApi.js","App.js","index.js"],"names":["Searchbar","onSubmit","useState","value","setValue","className","e","preventDefault","trim","toast","error","type","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","placeholder","ImageGalleryItem","src","alt","modalSrc","Button","onClick","modalRoot","document","querySelector","Modal","forImageModal","onCloseModal","useEffect","window","addEventListener","handleKeydown","removeEventListener","code","createPortal","target","Spinner","color","height","width","timeout","ImageGallery","searchQuery","page","setPage","per_page","images","setImages","setError","isLoading","setIsLoading","openModal","setOpenModal","imageForModal","setImageForModal","fetch","then","response","ok","json","Promise","reject","Error","PixabayFetchImages","hits","length","state","catch","finally","onScroll","scrollTo","top","documentElement","scrollHeight","behavior","dataset","modal","map","item","webformatURL","tags","largeImageURL","id","App","data","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1a152e2e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handlerInput = e => {\r\n    setValue(e.currentTarget.value.toLowerCase());\r\n  };\r\n  const handlerSubmit = e => {\r\n    e.preventDefault();\r\n    if (value.trim() === '') {\r\n      return toast.error('Please, enter search query!');\r\n    }\r\n    onSubmit(value);\r\n    setValue({ value: '' });\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handlerSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          onChange={handlerInput}\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ImageGalleryItem({ src, alt, modalSrc }) {\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img\r\n        src={src}\r\n        alt={alt}\r\n        data-modal={modalSrc}\r\n        className=\"ImageGalleryItem-image\"\r\n      />\r\n    </li>\r\n  );\r\n}\r\nImageGalleryItem.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n  modalSrc: PropTypes.string.isRequired,\r\n};\r\nexport default ImageGalleryItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Button({ onClick }) {\r\n  return (\r\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n      Load more\r\n    </button>\r\n  );\r\n}\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { createPortal } from 'react-dom';\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function Modal({ forImageModal, onCloseModal }) {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeydown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeydown);\r\n    };\r\n  });\r\n\r\n  const handleKeydown = e => {\r\n    if (e.code === 'Escape') {\r\n      onCloseModal();\r\n    }\r\n  };\r\n  const handleOnClickBackdrop = e => {\r\n    if (e.currentTarget === e.target) {\r\n      onCloseModal();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={handleOnClickBackdrop}>\r\n      <div className=\"Modal\">\r\n        <img src={forImageModal.src} alt={forImageModal.alt} />\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  forImageModal: PropTypes.object.isRequired,\r\n  onCloseModal: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default function Spinner() {\r\n  return (\r\n    <div className=\"Overlay\">\r\n      <Loader\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n        timeout={3000} //3 secs\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\nimport Button from '../Button';\r\nimport Modal from '../Modal/Modal';\r\nimport Loader from '../Loader';\r\nimport PixabayFetchImages from '../../services/PixabayApi';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function ImageGallery({ searchQuery }) {\r\n  const [page, setPage] = useState(1);\r\n  const [per_page, setPer_page] = useState(12);\r\n  const [images, setImages] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [imageForModal, setImageForModal] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (searchQuery !== '') {\r\n      setIsLoading(true);\r\n      PixabayFetchImages(searchQuery, page, per_page)\r\n        .then(response => {\r\n          if (response.hits.length > 0) {\r\n            setImages(state => [...state, ...response.hits]);\r\n          } else toast.error('Enter another word for searching!');\r\n        })\r\n        .catch(error => setError({ error }))\r\n        .finally(() => setIsLoading(false));\r\n\r\n      onScroll();\r\n    }\r\n  }, [page, searchQuery]);\r\n\r\n  const onClickHandler = e => {\r\n    setPage(state => state + 1);\r\n  };\r\n\r\n  const onScroll = () => {\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n  const onGalleryItemClick = e => {\r\n    setOpenModal(true);\r\n    setImageForModal({\r\n      src: e.target.dataset.modal,\r\n      alt: e.target.alt,\r\n    });\r\n  };\r\n  const toggleModal = () => {\r\n    setOpenModal(state => !state);\r\n  };\r\n\r\n  return (\r\n    <div className=\"gallery-container\">\r\n      {isLoading && <Loader />}\r\n      <ul className=\"ImageGallery\" onClick={onGalleryItemClick}>\r\n        {images.map(item => {\r\n          return (\r\n            <ImageGalleryItem\r\n              key={item.id}\r\n              src={item.webformatURL}\r\n              alt={item.tags}\r\n              modalSrc={item.largeImageURL}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n      {images.length > 0 && <Button onClick={onClickHandler} />}\r\n      {openModal && (\r\n        <Modal forImageModal={imageForModal} onCloseModal={toggleModal} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  searchQuery: PropTypes.string.isRequired,\r\n};\r\n","const KEY = '22428506-9ce357bec79fea58fa453e43f';\r\nconst BASE_URL = 'https://pixabay.com/api/';\r\n\r\nexport default function PixabayFetchImages(value, page, per_page) {\r\n  return fetch(\r\n    `${BASE_URL}/?q=${value}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=${per_page}`,\r\n  ).then(response => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error('This request is not successful'));\r\n  });\r\n}\r\n","import React, { useState } from 'react';\r\nimport Searchbar from './Components/Searchbar';\r\nimport ImageGallery from './Components/ImageGallery';\r\n\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function App() {\r\n  const [value, setValue] = useState('');\r\n\r\n  const onSubmitHandler = data => {\r\n    setValue(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Searchbar onSubmit={onSubmitHandler} />\r\n      <ImageGallery searchQuery={value} />\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}